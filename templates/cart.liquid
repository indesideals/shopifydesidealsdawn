<div class="local-cart-page" style="padding: 2rem 0;">
  <div class="container">
    <div class="cart-header" style="text-align: center; margin-bottom: 2rem;">
      <h1 style="font-size: 2.5rem; margin: 0 0 0.5rem 0;">Shopping Cart</h1>
      <div id="cart-item-count" style="color: #666; font-size: 1rem; margin-bottom: 1rem;">0 items</div>
      <a href="#" onclick="clearCart(); return false;" class="clear-cart-link" style="display: inline-flex; align-items: center; gap: 6px; color: #dc3545; text-decoration: none; font-size: 14px; font-weight: 500; border-bottom: 2px dotted #dc3545; padding-bottom: 2px;">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M3 6h18M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2m3 0v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6h14z"/>
        </svg>
        Clear Cart
      </a>
    </div>
    
    <div id="cart-content">
      <!-- Cart items will be loaded here -->
    </div>
    
    <div id="empty-cart" style="text-align: center; padding: 4rem 0; display: none;">
      <h2 style="color: #666; margin-bottom: 1rem;">Your cart is empty</h2>
      <p style="color: #999; margin-bottom: 2rem;">Add some products to get started!</p>
      <a href="/" class="btn" style="display: inline-block; padding: 1rem 2rem; background: var(--color-gradient-primary); color: white; text-decoration: none; border-radius: 8px;">Continue Shopping</a>
    </div>
  </div>
</div>

<style>
.local-cart-page {
  background: #f8f9fa;
  min-height: 100vh;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

.cart-item {
  background: white;
  border-radius: 8px;
  padding: 1rem;
  margin-bottom: 0.75rem;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  display: grid;
  grid-template-columns: 80px 1fr auto auto;
  gap: 1rem;
  align-items: center;
}

.cart-item-image {
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 6px;
}

.cart-item-details h3 {
  margin: 0 0 0.25rem 0;
  font-size: 1rem;
}

.cart-item-price {
  font-size: 0.9rem;
  font-weight: bold;
  color: #6366f1;
}

.cart-item-quantity {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.quantity-btn {
  width: 28px;
  height: 28px;
  border: 1px solid #ddd;
  background: white;
  border-radius: 4px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  font-size: 0.8rem;
}

.quantity-input {
  width: 40px;
  height: 28px;
  text-align: center;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 0.8rem;
}

.remove-btn {
  background: var(--color-gradient-primary);
  color: white;
  border: none;
  padding: 0.4rem 0.8rem;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.8rem;
}

.cart-summary {
  background: white;
  border-radius: 12px;
  padding: 2rem;
  margin-top: 2rem;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.cart-subtotal {
  font-size: 1rem;
  color: #666;
  margin-bottom: 0.5rem;
  text-align: right;
}

.cart-shipping {
  font-size: 1rem;
  color: #666;
  margin-bottom: 0.5rem;
  text-align: right;
}

.cart-total {
  font-size: 1.5rem;
  font-weight: bold;
  margin-bottom: 1rem;
  text-align: right;
  color: #6366f1;
}

.checkout-btn {
  width: 100%;
  padding: 1rem;
  background: #28a745;
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 1.1rem;
  font-weight: bold;
  cursor: pointer;
  margin-bottom: 1rem;
}

.clear-cart-btn {
  width: 100%;
  padding: 0.75rem;
  background: #6c757d;
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  cursor: pointer;
}

.btn:hover {
  opacity: 0.9;
}

@media (max-width: 768px) {
  .cart-item {
    grid-template-columns: 60px 1fr;
    gap: 0.75rem;
  }
  
  .cart-item-image {
    width: 60px;
    height: 60px;
  }
  
  .cart-item-quantity {
    grid-column: 1 / -1;
    justify-content: center;
    margin-top: 0.75rem;
  }
  
  .cart-header {
    flex-direction: column;
    gap: 1rem;
    text-align: center;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  loadLocalCart();
});

function loadLocalCart() {
  const localCart = JSON.parse(localStorage.getItem('localCart') || '[]');
  const cartContent = document.getElementById('cart-content');
  const emptyCart = document.getElementById('empty-cart');
  const cartItemCount = document.getElementById('cart-item-count');
  
  // Update item count
  const totalItems = localCart.reduce((sum, item) => sum + item.quantity, 0);
  cartItemCount.textContent = `${totalItems} item${totalItems !== 1 ? 's' : ''}`;
  
  if (localCart.length === 0) {
    cartContent.style.display = 'none';
    emptyCart.style.display = 'block';
    return;
  }
  
  cartContent.style.display = 'block';
  emptyCart.style.display = 'none';
  
  let cartHTML = '';
  let total = 0;
  
  localCart.forEach((item, index) => {
    const itemTotal = item.price * item.quantity;
    total += itemTotal;
    
    cartHTML += `
      <div class="cart-item">
        <img src="${item.image}" alt="${item.title}" class="cart-item-image">
        <div class="cart-item-details">
          <h3>${item.title}</h3>
          <div class="cart-item-price">₹${item.price.toFixed(2)}</div>
        </div>
        <div class="cart-item-quantity">
          <button class="quantity-btn" onclick="updateQuantity('${item.variantId}', ${item.quantity - 1})">-</button>
          <input type="number" class="quantity-input" value="${item.quantity}" min="1" onchange="updateQuantity('${item.variantId}', this.value)">
          <button class="quantity-btn" onclick="updateQuantity('${item.variantId}', ${item.quantity + 1})">+</button>
        </div>
        <button class="remove-btn" onclick="removeItem('${item.variantId}')">Remove</button>
      </div>
    `;
  });
  
  // Calculate shipping
  const shippingCost = total < 299 ? 49 : 0;
  const finalTotal = total + shippingCost;
  
  cartHTML += `
    <div class="cart-summary">
      <div class="cart-subtotal">Subtotal: ₹${total.toFixed(2)}</div>
      ${shippingCost > 0 ? `<div class="cart-shipping">Shipping: ₹${shippingCost.toFixed(2)}</div>` : '<div class="cart-shipping">Free Shipping</div>'}
      <div class="cart-total">Total: ₹${finalTotal.toFixed(2)}</div>
      <button class="checkout-btn" onclick="proceedToCheckout()">Proceed to Checkout</button>
      <button class="clear-cart-btn" onclick="clearCart()">Clear Cart</button>
    </div>
  `;
  
  cartContent.innerHTML = cartHTML;
}

function updateQuantity(variantId, newQuantity) {
  const localCart = JSON.parse(localStorage.getItem('localCart') || '[]');
  const item = localCart.find(item => item.variantId === variantId);
  
  if (item) {
    if (newQuantity <= 0) {
      removeItem(variantId);
    } else {
      item.quantity = parseInt(newQuantity);
      localStorage.setItem('localCart', JSON.stringify(localCart));
      loadLocalCart();
    }
  }
}

function removeItem(variantId) {
  const localCart = JSON.parse(localStorage.getItem('localCart') || '[]');
  const updatedCart = localCart.filter(item => item.variantId !== variantId);
  localStorage.setItem('localCart', JSON.stringify(updatedCart));
  loadLocalCart();
}

function clearCart() {
  localStorage.setItem('localCart', JSON.stringify([]));
  loadLocalCart();
}

function proceedToCheckout() {
  const localCart = JSON.parse(localStorage.getItem('localCart') || '[]');
  if (localCart.length === 0) {
    alert('Your cart is empty!');
    return;
  }
  
  console.log('Proceeding to checkout with cart:', localCart);
  
  // First, clear the Shopify cart to avoid conflicts
  fetch('/cart/clear.js', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    }
  })
  .then(() => {
    console.log('Shopify cart cleared');
    
    // Convert local cart to Shopify cart format
    const cartItems = localCart.map(item => ({
      id: parseInt(item.variantId), // Ensure it's a number
      quantity: parseInt(item.quantity)
    }));
    
    console.log('Cart items to add:', cartItems);
    
    // Add items to Shopify cart using AJAX
    return fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        items: cartItems
      })
    });
  })
  .then(response => {
    console.log('Cart add response status:', response.status);
    if (!response.ok) {
      return response.text().then(text => {
        console.error('Response text:', text);
        throw new Error(`HTTP error! status: ${response.status} - ${text}`);
      });
    }
    return response.json();
  })
  .then(data => {
    console.log('Items added to Shopify cart:', data);
    
    // Check if cart has items before redirecting
    return fetch('/cart.js');
  })
  .then(response => response.json())
  .then(cartData => {
    console.log('Current cart data:', cartData);
    if (cartData.item_count > 0) {
      console.log('Redirecting to checkout...');
      window.location.href = '/checkout';
    } else {
      throw new Error('Cart is empty after adding items');
    }
  })
  .catch(error => {
    console.error('Error in checkout process:', error);
    
    // Clear local cart if there's an error
    if (error.message.includes('422')) {
      alert('Error: Invalid product data. Please clear your cart and try adding products again.\\n\\nThis usually happens when:\\n1. Products were added before payment setup\\n2. Product data has changed\\n\\nClick OK to clear your cart.');
      localStorage.setItem('localCart', JSON.stringify([]));
      loadLocalCart();
    } else {
      alert('Error: ' + error.message + '\\n\\nPlease check:\\n1. Products are available for purchase\\n2. Payment methods are configured\\n3. Try refreshing the page and try again.');
    }
  });
}
</script>


